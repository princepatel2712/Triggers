# Generated by Django 5.0.6 on 2024-05-21 06:20

import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('test_trigger', '0010_versioned_delete_post_versioned_protect_update_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BookModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('status', models.CharField(default='unpublished', max_length=32)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='MyModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('int_field', models.IntegerField()),
                ('in_sync_int', models.IntegerField(help_text='Stays the same as int_field')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(default='unpublished')),
                ('content', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ProtectedModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='RedundantUpdateModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('redundant_field1', models.BooleanField(default=False)),
                ('redundant_field2', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='SoftDelete',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='TimeStampModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('editable_value', models.TextField()),
            ],
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='bookmodel',
            trigger=pgtrigger.compiler.Trigger(name='status_fsm', sql=pgtrigger.compiler.UpsertTriggerSql(declare='DECLARE _is_valid_transition BOOLEAN;', func='SELECT CONCAT(OLD."status", \':\', NEW."status") = ANY(\'{unpublished:published,published:inactive}\'::text[]) INTO _is_valid_transition; IF (_is_valid_transition IS FALSE AND OLD."status" IS DISTINCT FROM NEW."status") THEN RAISE EXCEPTION \'pgtrigger: Invalid transition of field "status" from "%" to "%" on table %\', OLD."status", NEW."status", TG_TABLE_NAME; ELSE RETURN NEW; END IF;', hash='dde460296df216342bc97ea9a9db0e73c86b7208', operation='UPDATE', pgid='pgtrigger_status_fsm_8e3f4', table='test_trigger_bookmodel', when='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='bookmodel',
            trigger=pgtrigger.compiler.Trigger(name='soft_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='UPDATE "test_trigger_bookmodel" SET is_active = False WHERE "id" = OLD."id"; RETURN NULL;', hash='ab28effbdda55ff36b5446ba764b3b372e5d4224', operation='DELETE', pgid='pgtrigger_soft_delete_da25b', table='test_trigger_bookmodel', when='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='mymodel',
            trigger=pgtrigger.compiler.Trigger(name='keep_in_sync', sql=pgtrigger.compiler.UpsertTriggerSql(func='NEW.in_sync_int = NEW.int_field; RETURN NEW;', hash='86d3c937d92276be0b242ff8397ff858182960da', operation='UPDATE OR INSERT', pgid='pgtrigger_keep_in_sync_3c09a', table='test_trigger_mymodel', when='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='post',
            trigger=pgtrigger.compiler.Trigger(name='freeze_published_model', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."status" = \'published\')', func="RAISE EXCEPTION 'pgtrigger: Cannot update rows from % table', TG_TABLE_NAME;", hash='fee85a5e15bc77432cb549ef7325f0f1b3e70c6c', operation='UPDATE', pgid='pgtrigger_freeze_published_model_ab0f1', table='test_trigger_post', when='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='post',
            trigger=pgtrigger.compiler.Trigger(name='freeze_publish_model_allowed_deactivate', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."status" = \'published\' AND NOT (NEW."status" = \'inactive\'))', func="RAISE EXCEPTION 'pgtrigger: Cannot update rows from % table', TG_TABLE_NAME;", hash='0604a654b066d136715366769a635868a8d7425a', operation='UPDATE', pgid='pgtrigger_freeze_publish_model_allowed_deactivate_c871b', table='test_trigger_post', when='BEFORE')),
        ),
        migrations.AddField(
            model_name='protectedmodel',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='redundantupdatemodel',
            trigger=pgtrigger.compiler.Trigger(name='protect_redundant_updates', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS NOT DISTINCT FROM NEW.*)', func="RAISE EXCEPTION 'pgtrigger: Cannot update rows from % table', TG_TABLE_NAME;", hash='7866a4e24c41e73826aff55c0f7a916cdb2d6dc4', operation='UPDATE', pgid='pgtrigger_protect_redundant_updates_148a7', table='test_trigger_redundantupdatemodel', when='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='softdelete',
            trigger=pgtrigger.compiler.Trigger(name='soft_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='UPDATE "test_trigger_softdelete" SET is_active = False WHERE "id" = OLD."id"; RETURN NULL;', hash='90e15a798b29805e7fd60d2cdeb70f343008e6f6', operation='DELETE', pgid='pgtrigger_soft_delete_2f6e6', table='test_trigger_softdelete', when='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='timestampmodel',
            trigger=pgtrigger.compiler.Trigger(name='read_only_created_at', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD."created_at" IS DISTINCT FROM (NEW."created_at"))', func="RAISE EXCEPTION 'pgtrigger: Cannot update rows from % table', TG_TABLE_NAME;", hash='d17668ccd775b8c6f57868ab262cb9ddb744f8e6', operation='UPDATE', pgid='pgtrigger_read_only_created_at_5b5f4', table='test_trigger_timestampmodel', when='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='protectedmodel',
            trigger=pgtrigger.compiler.Trigger(name='protect_deletes', sql=pgtrigger.compiler.UpsertTriggerSql(func="RAISE EXCEPTION 'pgtrigger: Cannot delete rows from % table', TG_TABLE_NAME;", hash='d200260d3638b46996cf700892355d3aace34518', operation='DELETE', pgid='pgtrigger_protect_deletes_b95b1', table='test_trigger_protectedmodel', when='BEFORE')),
        ),
    ]
