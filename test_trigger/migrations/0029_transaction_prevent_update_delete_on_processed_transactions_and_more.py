# Generated by Django 5.0.6 on 2024-05-21 10:11

import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('test_trigger', '0028_remove_transaction_prevent_update_delete_on_processed_transactions'),
    ]

    operations = [
        pgtrigger.migrations.AddTrigger(
            model_name='transaction',
            trigger=pgtrigger.compiler.Trigger(name='prevent_update_delete_on_processed_transactions', sql=pgtrigger.compiler.UpsertTriggerSql(func="\n            BEGIN\n                -- Skip validation if processed and amount are not being changed\n                IF NOT (OLD.processed IS DISTINCT FROM NEW.processed OR OLD.amount IS DISTINCT FROM NEW.amount) THEN\n                    RETURN NEW;\n                END IF;\n\n                -- Check if the transaction has been processed\n                IF OLD.processed THEN\n                    RAISE EXCEPTION 'Cannot update or delete a processed transaction';\n                END IF;\n\n                -- Allow updating amount if the transaction is not processed\n                IF NOT OLD.processed AND OLD.amount IS DISTINCT FROM NEW.amount THEN\n                    IF NEW.amount <= 0 THEN\n                        RAISE EXCEPTION 'Transaction amount must be positive';\n                    END IF;\n                END IF;\n\n                RETURN NEW;\n            END;\n        ", hash='a586424245b5c05443aa992b0afce3ddce3d2abf', operation='UPDATE OR DELETE', pgid='pgtrigger_prevent_update_delete_on_processed_transactions_a6536', table='test_trigger_transaction', when='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='transaction',
            trigger=pgtrigger.compiler.Trigger(name='transaction_audit_changes', sql=pgtrigger.compiler.UpsertTriggerSql(func="\n            DECLARE\n                audit_operation TEXT;\n                audit_data JSONB;\n            BEGIN\n                -- Determine the operation\n                CASE\n                    WHEN TG_OP = 'INSERT' THEN\n                        audit_operation := 'INSERT';\n                        audit_data := ROW_TO_JSON(NEW);\n                    WHEN TG_OP = 'UPDATE' THEN\n                        audit_operation := 'UPDATE';\n                        audit_data := JSONB_BUILD_OBJECT(\n                            'old', ROW_TO_JSON(OLD),\n                            'new', ROW_TO_JSON(NEW)\n                        );\n                    WHEN TG_OP = 'DELETE' THEN\n                        audit_operation := 'DELETE';\n                        audit_data := ROW_TO_JSON(OLD);\n                END CASE;\n\n                -- Insert the audit record\n                INSERT INTO audit_table (table_name, operation, timestamp, user_name, data)\n                VALUES ('transactions', audit_operation, timezone.now(), CURRENT_USER, audit_data);\n\n                RETURN NEW;\n            END;\n        ", hash='5ac37992878c72af32b75cd2a81cbcd54c798b7e', operation='INSERT OR UPDATE OR DELETE', pgid='pgtrigger_transaction_audit_changes_437a5', table='test_trigger_transaction', when='AFTER')),
        ),
    ]
