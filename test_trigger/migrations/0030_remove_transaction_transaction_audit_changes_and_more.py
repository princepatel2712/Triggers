# Generated by Django 5.0.6 on 2024-05-21 10:13

import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('test_trigger', '0029_transaction_prevent_update_delete_on_processed_transactions_and_more'),
    ]

    operations = [
        pgtrigger.migrations.RemoveTrigger(
            model_name='transaction',
            name='transaction_audit_changes',
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='transaction',
            trigger=pgtrigger.compiler.Trigger(name='transaction_audit_changes', sql=pgtrigger.compiler.UpsertTriggerSql(func="\n            DECLARE\n                audit_operation TEXT;\n                audit_data JSONB;\n            BEGIN\n                -- Determine the operation\n                CASE\n                    WHEN TG_OP = 'INSERT' THEN\n                        audit_operation := 'INSERT';\n                        audit_data := ROW_TO_JSON(NEW);\n                    WHEN TG_OP = 'UPDATE' THEN\n                        audit_operation := 'UPDATE';\n                        audit_data := JSONB_BUILD_OBJECT(\n                            'old', ROW_TO_JSON(OLD),\n                            'new', ROW_TO_JSON(NEW)\n                        );\n                    WHEN TG_OP = 'DELETE' THEN\n                        audit_operation := 'DELETE';\n                        audit_data := ROW_TO_JSON(OLD);\n                END CASE;\n\n                -- Check if audit_table exists, if not create it\n                BEGIN\n                    EXECUTE 'CREATE TABLE IF NOT EXISTS audit_table (\n                        id SERIAL PRIMARY KEY,\n                        table_name VARCHAR(255),\n                        operation VARCHAR(10),\n                        timestamp TIMESTAMP DEFAULT timezone.now(),\n                        user_name VARCHAR(255),\n                        data JSONB\n                    )';\n                EXCEPTION\n                    WHEN others THEN\n                        NULL;\n                END;\n\n                -- Insert the audit record\n                INSERT INTO audit_table (table_name, operation, timestamp, user_name, data)\n                VALUES ('transactions', audit_operation, timezone.now(), CURRENT_USER, audit_data);\n\n                RETURN NEW;\n            END;\n        ", hash='77cf30907d4bf2a6a774864c63eef1558d5198d8', operation='INSERT OR UPDATE OR DELETE', pgid='pgtrigger_transaction_audit_changes_437a5', table='test_trigger_transaction', when='AFTER')),
        ),
    ]
